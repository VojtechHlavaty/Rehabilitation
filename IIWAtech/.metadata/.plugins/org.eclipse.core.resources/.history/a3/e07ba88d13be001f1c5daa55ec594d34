package application;

import static com.kuka.roboticsAPI.motionModel.BasicMotions.ptp;

import java.util.concurrent.atomic.AtomicBoolean;

import javax.inject.Inject;

import com.kuka.roboticsAPI.applicationModel.IApplicationData;
import com.kuka.roboticsAPI.applicationModel.RoboticsAPIApplication;
import com.kuka.roboticsAPI.deviceModel.LBR;
import com.kuka.roboticsAPI.geometricModel.CartDOF;
import com.kuka.roboticsAPI.geometricModel.ObjectFrame;
import com.kuka.roboticsAPI.motionModel.controlModeModel.CartesianImpedanceControlMode;
import com.kuka.roboticsAPI.uiModel.userKeys.IUserKey;
import com.kuka.roboticsAPI.uiModel.userKeys.IUserKeyBar;
import com.kuka.roboticsAPI.uiModel.userKeys.IUserKeyListener;

public class CreateFrames extends RoboticsAPIApplication {

    @Inject
    private LBR robot;

    @Inject
    private IApplicationData data;

    private AtomicBoolean savePosition = new AtomicBoolean(false);

    @Override
    public void initialize() {
        // Set up a user key bar with a button to save the current position
        IUserKeyBar keyBar = getApplicationUI().createUserKeyBar("Save Position Key Bar");
        IUserKey saveKey = keyBar.addUserKey(0, new IUserKeyListener() {
            @Override
            public void onKeyPressed(IUserKey key) {
                savePosition.set(true);
            }

            @Override
            public void onKeyReleased(IUserKey key) {
                // No action needed on release
            }
        });

        saveKey.setText("Save Position");
        keyBar.publish();
    }

    @Override
    public void run() {
        // Create and configure the CartesianImpedanceControlMode
        CartesianImpedanceControlMode impedanceControlMode = new CartesianImpedanceControlMode();

        // Set stiffness for all Cartesian Degrees of Freedom (X, Y, Z, A, B, C)
        impedanceControlMode.parametrize(CartDOF.X).setStiffness(1);
        impedanceControlMode.parametrize(CartDOF.Y).setStiffness(1);
        impedanceControlMode.parametrize(CartDOF.Z).setStiffness(1);
        impedanceControlMode.parametrize(CartDOF.A).setStiffness(1);
        impedanceControlMode.parametrize(CartDOF.B).setStiffness(1);
        impedanceControlMode.parametrize(CartDOF.C).setStiffness(1);

        int frameCounter = 1; // Counter for naming new frames

        try {
            getLogger().info("Starting impedance control with save position feature.");

            while (true) {
                // Apply impedance control mode
                robot.move(ptp(robot.getCurrentCartesianPosition(robot.getFlange())).setMode(impedanceControlMode));

                // Check if the save button was pressed
                if (savePosition.get()) {
                    savePosition.set(false); // Reset the flag

                    // Get the current Cartesian position
                    ObjectFrame currentFrame = robot.getCurrentCartesianPosition(robot.getFlange());

                    // Save the frame in application data
                    String frameName = "SavedFrame" + frameCounter++;
                    data.addFrame(frameName, currentFrame);

                    getLogger().info("Saved current position as frame: " + frameName);
                }

                Thread.sleep(1000); // Periodic update loop
            }
        } catch (InterruptedException e) {
            getLogger().info("Impedance control loop interrupted.");
        } catch (Exception e) {
            getLogger().error("Failed to maintain impedance control mode.", e);
        }
    }
}