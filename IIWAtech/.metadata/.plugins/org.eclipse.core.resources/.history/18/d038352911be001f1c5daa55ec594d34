package application;

import javax.inject.Inject;

import com.kuka.roboticsAPI.applicationModel.IApplicationData;
import com.kuka.roboticsAPI.applicationModel.RoboticsAPIApplication;
import com.kuka.roboticsAPI.deviceModel.LBR;
import com.kuka.roboticsAPI.geometricModel.CartDOF;
import com.kuka.roboticsAPI.motionModel.controlModeModel.CartesianImpedanceControlMode;

public class CreateFrames extends RoboticsAPIApplication {

    @Inject
    private LBR robot;

    @Inject
    private IApplicationData data;

    public void run() {
        // Create and configure the CartesianImpedanceControlMode
        CartesianImpedanceControlMode impedanceControlMode = new CartesianImpedanceControlMode();

        // Set stiffness for all Cartesian Degrees of Freedom (X, Y, Z, A, B, C)
        impedanceControlMode.parametrize(CartDOF.X).setStiffness(50);
        impedanceControlMode.parametrize(CartDOF.Y).setStiffness(50);
        impedanceControlMode.parametrize(CartDOF.Z).setStiffness(50);
        impedanceControlMode.parametrize(CartDOF.A).setStiffness(50);
        impedanceControlMode.parametrize(CartDOF.B).setStiffness(50);
        impedanceControlMode.parametrize(CartDOF.C).setStiffness(50);

        try {
            // Keep the robot in impedance control mode
            getLogger().info("Activating impedance control mode indefinitely.");
            robot.moveAsync(robot.getCurrentCartesianPosition(robot.getFlange()).setMode(impedanceControlMode));

            // Prevent the application from exiting immediately
            while (true) {
                Thread.sleep(1000); // Keep the application running
            }
        } catch (Exception e) {
            getLogger().error("Failed to enable impedance control mode.", e);
        }
    }
}
