package application;

import javax.inject.Inject;

import com.kuka.roboticsAPI.applicationModel.IApplicationData;
import com.kuka.roboticsAPI.applicationModel.RoboticsAPIApplication;
import com.kuka.roboticsAPI.deviceModel.LBR;
import com.kuka.roboticsAPI.motionModel.controlModeModel.CartesianImpedanceControlMode;

public class CreateFrames extends RoboticsAPIApplication {

    @Inject
    private LBR robot;

    @Inject
    private IApplicationData data;

    public void run() {
        // Create and configure the CartesianImpedanceControlMode
        CartesianImpedanceControlMode impedanceControlMode = new CartesianImpedanceControlMode();

        // Set stiffness for translation (X, Y, Z)
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_X).stiffness(1000);
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_Y).stiffness(1000);
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_Z).stiffness(1000);

        // Set stiffness for rotation (A, B, C)
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_A).stiffness(300);
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_B).stiffness(300);
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_C).stiffness(300);

        // Optionally set damping
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_X).damping(0.7);
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_Y).damping(0.7);
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_Z).damping(0.7);
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_A).damping(0.5);
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_B).damping(0.5);
        impedanceControlMode.parametrize(CartesianImpedanceControlMode.CARTESIAN_C).damping(0.5);

        // Enable impedance control without moving the robot
        try {
            getLogger().info("Activating impedance control. Robot will hold its current position.");
            robot.moveAsync(robot.getCurrentCartesianPosition(robot.getFlange()).setMode(impedanceControlMode));
        } catch (Exception e) {
            getLogger().error("Failed to enable impedance control mode.", e);
        }
    }
}
